# def dfs(i, j, n, m, visited, mat):
# 	visited[i][j] = True
# 	dr = [-1, -1, -1, 0, 1, 1, 1, 0]
# 	dc = [-1, 0, 1, 1, 1, 0, -1, -1]
# 	for k in range(8):
# 		r = i + dr[k]
# 		c = j + dc[k]
# 		if r >= 0 and c >= 0 and r < n and c < m and not visited[r][c] and mat[r][c]:
# 			dfs(r, c, n, m, visited, mat)

# def findIslands(mat, n, m):
# 	visited = [[False for j in range(m)] for i in range(n)]
# 	res = 0
# 	for i in range(n):
# 		for j in range(m):
# 			if not visited[i][j] and mat[i][j]:
# 				dfs(i, j, n, m, visited, mat)
# 				res += 1
# 	return res		

from collections import deque
def bfs(i, j, n, m, visited, mat):
	que = deque([(i, j)])
	dr = [-1, -1, -1, 0, 1, 1, 1, 0]
	dc = [-1, 0, 1, 1, 1, 0, -1, -1]
	while que:
		i, j = que.popleft()
		visited[i][j] = True
		for k in range(8):
			r = i + dr[k]
			c = j + dc[k]
			if r >= 0 and c >= 0 and r < n and c < m and not visited[r][c] and mat[r][c]:
				que.append((r, c))

def findIslands(mat, n, m):
	visited = [[False for j in range(m)] for i in range(n)]
	res = 0
	for i in range(n):
		for j in range(m):
			if not visited[i][j] and mat[i][j]:
				bfs(i, j, n, m, visited, mat)
				res += 1
	return res		

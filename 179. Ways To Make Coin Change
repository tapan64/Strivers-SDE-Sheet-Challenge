from sys import stdin,setrecursionlimit
# setrecursionlimit(10**7)

# def dfs(i, value, denominations, dp):
#     if value == 0:
#         return 1
#     if i == -1:
#         return 0
#     if dp[i][value] != -1:
#         return dp[i][value]
#     ways = dfs(i - 1, value, denominations, dp)
#     if value >= denominations[i]:
#         ways += dfs(i, value - denominations[i], denominations, dp)
#     dp[i][value] = ways
#     return dp[i][value]

# def countWaysToMakeChange(denominations, value):
#     n = len(denominations)
#     dp = [[-1 for j in range(value + 1)] for i in range(n)]
#     return dfs(n - 1, value, denominations, dp)


# def countWaysToMakeChange(denominations, totalValue):
#     n = len(denominations)
#     dp = [[0 for j in range(totalValue + 1)] for i in range(n + 1)]
#     for i in range(n + 1):
#         dp[i][0] = 1
#     for i in range(1, n + 1):
#         for value in range(1, totalValue + 1):
#             ways = dp[i - 1][value]
#             if value >= denominations[i - 1]:
#                 ways += dp[i][value - denominations[i - 1]]
#             dp[i][value] = ways
#     return dp[n][value]


def countWaysToMakeChange(denominations, totalValue):
    n = len(denominations)
    prev = [0] * (totalValue + 1)
    prev[0] = 1
    for i in range(1, n + 1):
        cur = [0] * (totalValue + 1)
        cur[0] = 1
        for value in range(1, totalValue + 1):
            ways = prev[value]
            if value >= denominations[i - 1]:
                ways += cur[value - denominations[i - 1]]
            cur[value] = ways
        prev = cur
    return prev[value]

# def dfs(i, j, n, m, grid, dp):
#     if i == 0 and j == 0:
#         return grid[0][0]
#     if i == -1 or j == -1:
#         return sys.maxsize
#     if dp[i][j] != -1:
#         return dp[i][j]
#     top = dfs(i - 1, j, n, m, grid, dp)
#     left = dfs(i, j - 1, n, m, grid, dp)
#     dp[i][j] = grid[i][j] + min(top, left)
#     return dp[i][j]


# def minSumPath(grid):
#     n, m = len(grid), len(grid[0])
#     dp = [[-1 for j in range(m)] for i in range(n)]
#     return dfs(n - 1, m - 1, n, m, grid, dp)


# def minSumPath(grid):
#     n, m = len(grid), len(grid[0])
#     dp = [[0 for j in range(m)] for i in range(n)]
#     for i in range(n):
#         for j in range(m):
#             if i == 0 and j == 0:
#                 dp[i][j] = grid[0][0]
#             else:
#                 top = dp[i - 1][j] if i > 0 else sys.maxsize 
#                 left = dp[i][j - 1] if j > 0 else sys.maxsize
#                 dp[i][j] = grid[i][j] + min(top, left)
#     return dp[n - 1][m - 1]


# def minSumPath(grid):
#     n, m = len(grid), len(grid[0])
#     prev = [0] * m
#     for i in range(n):
#         cur = [0] * m
#         for j in range(m):
#             if i == 0 and j == 0:
#                 cur[j] = grid[0][0]
#             else:
#                 top = prev[j] if i > 0 else sys.maxsize 
#                 left = cur[j - 1] if j > 0 else sys.maxsize
#                 cur[j] = grid[i][j] + min(top, left)
#         prev = cur
#     return prev[m - 1]


def minSumPath(grid):
    n, m = len(grid), len(grid[0])
    dp = [0] * m
    for i in range(n):
        for j in range(m):
            if i == 0 and j == 0:
                dp[0] = grid[0][0]
            else:
                top = dp[j] if i > 0 else sys.maxsize 
                left = dp[j - 1] if j > 0 else sys.maxsize
                dp[j] = grid[i][j] + min(top, left)
    return dp[m - 1]

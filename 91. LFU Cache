class Node:
    def __init__(self, key=0, val=0):
        self.key = key
        self.val = val
        self.level = 0
        self.prev = None
        self.next = None

class DLL:
    def __init__(self):
        self.head = Node()
        self.tail = Node()
        self.head.next = self.tail
        self.tail.prev = self.head
        self.size = 0
    
    def insert(self, node):
        nex = self.head.next
        self.head.next = node
        node.next = nex
        nex.prev = node
        node.prev = self.head
        self.size += 1
    
    def delete(self, node):
        node.prev.next = node.next
        node.next.prev = node.prev
        self.size -= 1

class LFUCache:

    def __init__(self, capacity: int):
        self.dlls = [DLL()]
        self.keyNodes = {}
        self.capacity = capacity
        self.size = 0
        self.mnLvl = 0

    def updateNodeLevel(self, node):
        lvl = node.level
        self.dlls[lvl].delete(node)
        if self.dlls[lvl].size == 0:
            self.mnLvl += 1
        if lvl + 1 == len(self.dlls):
            self.dlls.append(DLL())
        node.level = lvl + 1
        self.dlls[lvl + 1].insert(node)

    def get(self, key: int) -> int:
        if key in self.keyNodes:
            node = self.keyNodes[key]
            val = node.val
            self.updateNodeLevel(node)
            return val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.keyNodes:
            node = self.keyNodes[key]
            node.val = value
            self.updateNodeLevel(node)
            return
        if self.size == self.capacity:
            dll = self.dlls[self.mnLvl]
            lastNode = dll.tail.prev
            dll.delete(lastNode)
            self.keyNodes.pop(lastNode.key)
        newNode = Node(key, value)
        self.mnLvl = 0
        self.dlls[self.mnLvl].insert(newNode)
        self.keyNodes[key] = newNode
        self.size += 1

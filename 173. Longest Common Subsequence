# def dfs(i, j, s, t, dp):
# 	if i == -1 or j == -1:
# 		return 0
# 	if dp[i][j] != -1:
# 		return dp[i][j]
# 	if s[i] == t[j]:
# 		dp[i][j] = 1 + dfs(i - 1, j - 1, s, t, dp)
# 	else:
# 		dp[i][j] = max(dfs(i - 1, j, s, t, dp), dfs(i, j - 1, s, t, dp))
# 	return dp[i][j]
	
# def lcs(s, t) :
# 	sn, tn = len(s), len(t)
# 	dp = [[-1 for j in range(tn)] for i in range(sn)]
# 	return dfs(sn - 1, tn - 1, s, t, dp)


# def lcs(s, t) :
# 	sn, tn = len(s), len(t)
# 	dp = [[0 for j in range(tn + 1)] for i in range(sn + 1)]
# 	for i in range(1, sn + 1):
# 		for j in range(1, tn + 1):
# 			if s[i - 1] == t[j - 1]:
# 				dp[i][j] = 1 + dp[i - 1][j - 1]
# 			else:
# 				dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
# 	return dp[sn][tn]


def lcs(s, t) :
	sn, tn = len(s), len(t)
	prev = [0] * (tn + 1)
	for i in range(1, sn + 1):
		cur = [0] * (tn + 1)	
		for j in range(1, tn + 1):
			if s[i - 1] == t[j - 1]:
				cur[j] = 1 + prev[j - 1]
			else:
				cur[j] = max(prev[j], cur[j - 1])
		prev = cur
	return prev[tn]

# def dfs(node, visited, pathVisited, adj):
#     visited[node] = pathVisited[node] = True
#     for adjNode in adj[node]:
#         if not visited[adjNode]:
#             if dfs(adjNode, visited, pathVisited, adj):
#                 return True
#         elif pathVisited[adjNode]:
#             return True
#     pathVisited[node] = False
#     return False

# def detectCycleInDirectedGraph(n, edges):
#     visited, pathVisited = [False] * (n + 1), [False] * (n + 1)
#     adj = [[] for i in range(n + 1)]
#     for a, b in edges:
#         adj[a].append(b)
#     for node in range(n):
#         if not visited[node]:
#             if dfs(node, visited, pathVisited, adj):
#                 return True
#     return False

from collections import deque
def detectCycleInDirectedGraph(n, edges):
    visited, pathVisited = [False] * (n + 1), [False] * (n + 1)
    adj = [[] for i in range(n + 1)]
    inorders = [0] * (n + 1)
    for a, b in edges:
        adj[a].append(b)
        inorders[b] += 1
    que = deque()
    topo = []
    for node in range(1, n + 1):
        if inorders[node] == 0:
            que.append(node)
    while que:
        node = que.popleft()
        topo.append(node)
        for adjNode in adj[node]:
            inorders[adjNode] -= 1
            if inorders[adjNode] == 0:
                que.append(adjNode)
    return len(topo) != n

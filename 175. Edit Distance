# def dfs(i, j, str1, str2, dp):
#     if i == -1:
#         return j + 1
#     if j == -1:
#         return i + 1
#     if dp[i][j] != -1:
#         return dp[i][j]
#     if str1[i] == str2[j]:
#         dp[i][j] = dfs(i - 1, j - 1, str1, str2, dp)
#     else:
#         deleteChar = dfs(i - 1, j, str1, str2, dp)
#         replaceChar = dfs(i - 1, j - 1, str1, str2, dp)
#         insertChar = dfs(i, j - 1, str1, str2, dp)
#         dp[i][j] = 1 + min(deleteChar, replaceChar, insertChar)
#     return dp[i][j]

# def editDistance(str1, str2) :
#     n1, n2 = len(str1), len(str2)
#     dp = [[-1 for j in range(n2)] for i in range(n1)]
#     return dfs(n1 - 1, n2 - 1, str1, str2, dp)


# def editDistance(str1, str2) :
#     n1, n2 = len(str1), len(str2)
#     dp = [[0 for j in range(n2 + 1)] for i in range(n1 + 1)]
#     for i in range(n1 + 1):
#         dp[i][0] = i
#     for j in range(n2 + 1):
#         dp[0][j] = j
#     for i in range(1, n1 + 1):
#         for j in range(1, n2 + 1):
#             if str1[i - 1] == str2[j - 1]:
#                 dp[i][j] = dp[i - 1][j - 1]
#             else:
#                 deleteChar = dp[i - 1][j]
#                 replaceChar = dp[i - 1][j - 1]
#                 insertChar = dp[i][j - 1]
#                 dp[i][j] = 1 + min(deleteChar, replaceChar, insertChar)
#     return dp[n1][n2]


def editDistance(str1, str2) :
    n1, n2 = len(str1), len(str2)
    prev = [0] * (n2 + 1)
    for j in range(n2 + 1):
        prev[j] = j
    for i in range(1, n1 + 1):
        cur = [0] * (n2 + 1)
        cur[0] = i
        for j in range(1, n2 + 1):
            if str1[i - 1] == str2[j - 1]:
                cur[j] = prev[j - 1]
            else:
                deleteChar = prev[j]
                replaceChar = prev[j - 1]
                insertChar = cur[j - 1]
                cur[j] = 1 + min(deleteChar, replaceChar, insertChar)
        prev = cur
    return prev[n2]
